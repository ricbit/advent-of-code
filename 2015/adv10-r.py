import itertools
import aoc
import sys

# Conway's element table, from wikipedia
RAW_ELEMENTS = """
1	H	22	H	91790.383216
2	He	13112221133211322112211213322112	Hf.Pa.H.Ca.Li	3237.2968588
3	Li	312211322212221121123222112	He	4220.0665982
4	Be	111312211312113221133211322112211213322112	Ge.Ca.Li	2263.8860325
5	B	1321132122211322212221121123222112	Be	2951.1503716
6	C	3113112211322112211213322112	B	3847.0525419
7	N	111312212221121123222112	C	5014.9302464
8	O	132112211213322112	N	6537.3490750
9	F	31121123222112	O	8521.9396539
10	Ne	111213322112	F	11109.006696
11	Na	123222112	Ne	14481.448773
12	Mg	3113322112	Pm.Na	18850.441228
13	Al	1113222112	Mg	24573.006696
14	Si	1322112	Al	32032.812960
15	P	311311222112	Ho.Si	14895.886658
16	S	1113122112	P	19417.939250
17	Cl	132112	S	25312.784218
18	Ar	3112	Cl	32997.170122
19	K	1112	Ar	43014.360913
20	Ca	12	K	56072.543129
21	Sc	3113112221133112	Ho.Pa.H.Ca.Co	9302.0974443
22	Ti	11131221131112	Sc	12126.002783
23	V	13211312	Ti	15807.181592
24	Cr	31132	V	20605.882611
25	Mn	111311222112	Cr.Si	26861.360180
26	Fe	13122112	Mn	35015.858546
27	Co	32112	Fe	45645.877256
28	Ni	11133112	Zn.Co	13871.123200
29	Cu	131112	Ni	18082.082203
30	Zn	312	Cu	23571.391336
31	Ga	13221133122211332	Eu.Ca.Ac.H.Ca.Zn	1447.8905642
32	Ge	31131122211311122113222	Ho.Ga	1887.4372276
33	As	11131221131211322113322112	Ge.Na	27.246216076
34	Se	13211321222113222112	As	35.517547944
35	Br	3113112211322112	Se	46.299868152
36	Kr	11131221222112	Br	60.355455682
37	Rb	1321122112	Kr	78.678000089
38	Sr	3112112	Rb	102.56285249
39	Y	1112133	Sr.U	133.69860315
40	Zr	12322211331222113112211	Y.H.Ca.Tc	174.28645997
41	Nb	1113122113322113111221131221	Er.Zr	227.19586752
42	Mo	13211322211312113211	Nb	296.16736852
43	Tc	311322113212221	Mo	386.07704943
44	Ru	132211331222113112211	Eu.Ca.Tc	328.99480576
45	Rh	311311222113111221131221	Ho.Ru	428.87015041
46	Pd	111312211312113211	Rh	559.06537946
47	Ag	132113212221	Pd	728.78492056
48	Cd	3113112211	Ag	950.02745646
49	In	11131221	Cd	1238.4341972
50	Sn	13211	In	1614.3946687
51	Sb	3112221	Pm.Sn	2104.4881933
52	Te	1322113312211	Eu.Ca.Sb	2743.3629718
53	I	311311222113111221	Ho.Te	3576.1856107
54	Xe	11131221131211	I	4661.8342720
55	Cs	13211321	Xe	6077.0611889
56	Ba	311311	Cs	7921.9188284
57	La	11131	Ba	10326.833312
58	Ce	1321133112	La.H.Ca.Co	13461.825166
59	Pr	31131112	Ce	17548.529287
60	Nd	111312	Pr	22875.863883
61	Pm	132	Nd	29820.456167
62	Sm	311332	Pm.Ca.Zn	15408.115182
63	Eu	1113222	Sm	20085.668709
64	Gd	13221133112	Eu.Ca.Co	21662.972821
65	Tb	3113112221131112	Ho.Gd	28239.358949
66	Dy	111312211312	Tb	36812.186418
67	Ho	1321132	Dy	47987.529438
68	Er	311311222	Ho.Pm	1098.5955997
69	Tm	11131221133112	Er.Ca.Co	1204.9083841
70	Yb	1321131112	Tm	1570.6911808
71	Lu	311312	Yb	2047.5173200
72	Hf	11132	Lu	2669.0970363
73	Ta	13112221133211322112211213322113	Hf.Pa.H.Ca.W	242.07736666
74	W	312211322212221121123222113	Ta	315.56655252
75	Re	111312211312113221133211322112211213322113	Ge.Ca.W	169.28801808
76	Os	1321132122211322212221121123222113	Re	220.68001229
77	Ir	3113112211322112211213322113	Os	287.67344775
78	Pt	111312212221121123222113	Ir	375.00456738
79	Au	132112211213322113	Pt	488.84742982
80	Hg	31121123222113	Au	637.25039755
81	Tl	111213322113	Hg	830.70513293
82	Pb	123222113	Tl	1082.8883285
83	Bi	3113322113	Pm.Pb	1411.6286100
84	Po	1113222113	Bi	1840.1669683
85	At	1322113	Po	2398.7998311
86	Rn	311311222113	Ho.At	3127.0209328
87	Fr	1113122113	Rn	4076.3134078
88	Ra	132113	Fr	5313.7894999
89	Ac	3113	Ra	6926.9352045
90	Th	1113	Ac	7581.9047125
91	Pa	13	Th	9883.5986392
92	U	3	Pa	102.56285249
"""

def read_elements():
  elements = {}
  for line in RAW_ELEMENTS.strip().splitlines():
    _, name, seq, decay, _ = line.split()
    elements[name] = (seq, decay.split("."))
  return elements

def process(src):
  ans = []
  for k, v in itertools.groupby(src):
    ans.append(str(len(list(v))))
    ans.append(k)
  return "".join(ans)

def convert(src):
  ans = []
  sortkey = lambda x: len(x[1][0])
  while src:
    sorted_elems = sorted(elements.items(), key=sortkey, reverse=True)
    for element, (seq, _) in sorted_elems:
      if src.startswith(seq):
        ans.append(element)
        src = src[len(seq):]
        break
    else:
      return False, None
  return True, ans

def find_seed(src):
  for i in range(50):
    success, result = convert(src)
    if success:
      return i, result
    src = process(src)
  return None, None

def apply(src, times):
  for _ in range(times):
    newsrc = []
    for element in src:
      newsrc.extend(elements[element][1])
    src = newsrc
    yield sum(len(elements[element][0]) for element in src)

elements = read_elements()
src = sys.stdin.read().strip()
day, seed = find_seed(src)
for i, ans in enumerate(apply(seed, 50 - day)):
  if i + 1 + day in [40, 50]:
    aoc.cprint(ans)
